name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  validate:
    name: Validate Project
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run validation
      run: npm run validate
      
    - name: Check version sync
      run: node scripts/version.js info

  build:
    name: Build Extensions
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extensions
      run: npm run build
      
    - name: Upload Chrome build
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension
        path: .dist/monitor-sau-chrome.zip
        retention-days: 30
        
    - name: Upload Firefox build
      uses: actions/upload-artifact@v4
      with:
        name: firefox-extension
        path: .dist/monitor-sau-firefox.zip
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for sensitive files
      run: |
        if find . -name "*.env*" -o -name "*secret*" -o -name "*key*" | grep -v node_modules | grep -v .git; then
          echo "❌ Sensitive files detected!"
          exit 1
        else
          echo "✅ No sensitive files found"
        fi

  release:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [validate, build, security-scan]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extensions
      run: npm run build
      
    - name: Get release info
      id: release_info
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_id=${{ github.event.release.id }}" >> $GITHUB_OUTPUT
        else
          # Extract tag from ref
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          # Get release ID from tag
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq '.id' 2>/dev/null || echo "")
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        files: |
          .dist/monitor-sau-chrome.zip
          .dist/monitor-sau-firefox.zip
        fail_on_unmatched_files: true
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify upload
      run: |
        echo "✅ Release assets uploaded successfully for ${{ steps.release_info.outputs.tag_name }}"
        gh release view ${{ steps.release_info.outputs.tag_name }} --json assets --jq '.assets[].name'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}